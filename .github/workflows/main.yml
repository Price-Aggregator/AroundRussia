name: AroundRussia workflow

on:
  push:
    branches: [main, develop]

jobs:
  front-tests:
    name: Push Docker image to DockerHub
    defaults:
      run:
        working-directory: ./frontend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install Node.JS
        uses: actions/setup-node@v1
        with:
          node-version: "14"
      - name: Install dependencies
        run: npm ci
      - name: Run ESLint
        run: npm run lint
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to Docker
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to Docker Hub
        uses: docker/build-push-action@v2
        with:
          context: frontend/
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/around-russia-frontend:${{ github.sha }}
            ${{ secrets.DOCKER_USERNAME }}/around-russia-frontend:latest
  deploy:
    runs-on: ubuntu-latest
    needs: front-tests
    steps:
      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          script: |
            cd aroundrussia-app
            sudo docker-compose down --remove-orphans
            sudo docker-compose rm -f backend frontend
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/around-russia-backend
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/around-russia-frontend
            rm -f .env
            touch .env
            echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
            echo DB_NAME=${{ secrets.DB_NAME }} >> .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo DB_HOST=${{ secrets.DB_HOST }} >> .env
            echo DB_PORT=${{ secrets.DB_PORT }} >> .env
            echo DJANGO_KEY=${{ secrets.DJANGO_KEY }} >> .env
            echo DEBUG=${{ secrets.DEBUG }} >> .env
            echo HOST=${{ secrets.HOST }} >> .env
            echo TOKEN=${{ secrets.AVIA_TOKEN }} >> .env
            sudo docker-compose up -d
            sudo docker image prune          