name: AroundRussia workflow

on:
  push:
    branches:
      - main

jobs:
  # front-tests:
  # build-front:
  #   runs-on: ubuntu-latest
  #   needs: front-tests
  #     steps:
  #     - uses: actions/checkout@v2 
  #     - uses: docker/setup-buildx-action@v1 
  #     - uses: docker/login-action@v1 
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}

  #     - uses: docker/build-push-action@v2 
  #       with:
  #         context: frontend/
  #         push: true
  #         tags: ${{ secrets.DOCKER_REPOSITORY }}/around-russia-frontend:latest
  # back-tests:
  # build-back:
  #   runs-on: ubuntu-latest
  #   needs: back-tests
  #     steps:
  #     - uses: actions/checkout@v2 
  #     - uses: docker/setup-buildx-action@v1 
  #     - uses: docker/login-action@v1 
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}

  #     - uses: docker/build-push-action@v2 
  #       with:
  #         context: backend/
  #         push: true
  #         tags: ${{ secrets.DOCKER_REPOSITORY }}/around-russia-backend:latest
  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: [build-front, build-back]
  #   steps:
  #     - name: executing remote ssh commands to deploy
  #       uses: appleboy/ssh-action@master
  #       with:
  #         host: ${{ secrets.HOST }}
  #         username: ${{ secrets.USER }}
  #         key: ${{ secrets.SSH_KEY }}
  #         script: |
  #           cd aroundrussia-app
  #           sudo docker-compose stop
  #           sudo docker-compose rm -f backend frontend
  #           sudo docker-compose pull backend frontend
  #           rm -f .env
  #           touch .env
  #           echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
  #           echo DB_NAME=${{ secrets.DB_NAME }} >> .env
  #           echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
  #           echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
  #           echo DB_HOST=${{ secrets.DB_HOST }} >> .env
  #           echo DB_PORT=${{ secrets.DB_PORT }} >> .env
  #           echo DJANGO_KEY=${{ secrets.DJANGO_KEY }} >> .env
  #           echo DEBUG=${{ secrets.DEBUG }} >> .env
  #           echo HOST=${{ secrets.HOST }} >> .env
  #           sudo docker-compose up -d
  #           sudo docker-compose exec -T backend python manage.py migrate